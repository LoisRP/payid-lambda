AWSTemplateFormatVersion: "2010-09-09"
Description: "PayID Lambda Server and API Gateway front end"

Parameters:
  apiGatewayStageName:
    Type: "String"
    AllowedPattern: "^[a-z0-9]+$"
    Default: "release"

  lambdaFunctionName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$"
    Default: "payid-server"

  payIdBucketName:
    Type: "String"
    AllowedPattern: "^[a-z0-9-]+$"
    Default: "payid-server-resources"

  domainName:
    Type: "String"
    AllowedPattern: "^[a-z0-9.]+$"

  certificateArn:
    Type: "String"

Resources:
  apiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "payid-server-api"
      Description: "API Gateway endpoints to invoke PayID Lambda"

  apiGatewayPayIdResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref apiGateway
      ParentId: !GetAtt
        - apiGateway
        - RootResourceId
      PathPart: "{payId}"

  apiGatewayRootMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "lambdaFunction.Arn"
      ResourceId: !GetAtt "apiGateway.RootResourceId"
      RestApiId: !Ref "apiGateway"

  apiGatewayPayIdMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "lambdaFunction.Arn"
      ResourceId: !Ref "apiGatewayPayIdResource"
      RestApiId: !Ref "apiGateway"

  apiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "apiGatewayRootMethod"
    Properties:
      RestApiId: !Ref "apiGateway"
      StageName: !Ref "apiGatewayStageName"

  apiGatewayCustomDomain:
    Type: "AWS::ApiGateway::DomainName"
    Properties:
      CertificateArn: !Ref "certificateArn"
      DomainName: !Ref "domainName"
      SecurityPolicy: "TLS_1_2"

  apiGatewayDomainResourceMapping:
    Type: "AWS::ApiGateway::BasePathMapping"
    DependsOn: "apiGatewayDeployment"
    Properties:
      DomainName: !Ref "domainName"
      RestApiId: !Ref "apiGateway"
      Stage: !Ref "apiGatewayStageName"

  lambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');

          const s3 = new AWS.S3();

          const networkHeaders = [
              'application/xrpl-testnet+json',
              'application/xrpl-mainnet+json',
          ];

          const responseHeaders = {
              'Access-Control-Allow-Origin': '*',
              'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',
              'Access-Control-Allow-Headers': 'PayID-Version',
              'Access-Control-Expose-Headers': 'PayID-Version, PayID-Server-Version',
              'Cache-Control': 'no-store',
          };

          const success = {
              statusCode: 200,
              headers: responseHeaders,
          };

          exports.handler =  async function(event, context) {
              if (event.path === '/') {
                  return { ...success, body: 'Welcome to PayID!' };
              }

              const payIdVersionHeader = event.headers['PayID-Version'];
              if (payIdVersionHeader && payIdVersionHeader !== '1.0') {
                  return {
                      statusCode: 422,
                      body: 'Unknown PayID version set.',
                  };
              }

              const payId = event.pathParameters.payId;
              try {
                  const params = {
                      Bucket: process.env.PAYID_BUCKET,
                      Key: `${payId}.json`,
                  };
                  const payIdResource = await s3.getObject(params).promise();

                  const payIdJson = JSON.parse(payIdResource.Body.toString());

                  const accept = event.headers.Accept;
                  if (networkHeaders.indexOf(accept) !== -1) {
                      const networkHeader = accept.substring('application/'.length);
                      const network = networkHeader.substring(0, networkHeader.indexOf('-'));
                      const environment = networkHeader.substring(network.length + 1, networkHeader.indexOf('+'));
                      const selectedAddress = payIdJson.addresses
                          .find(a => a.paymentNetwork === network.toUpperCase() && a.environment === environment.toUpperCase());
                      if (selectedAddress) {
                          return { ...success, body: JSON.stringify(selectedAddress) };
                      }
                      return {
                          statusCode: 404,
                          body: `No address for ${accept} available for PayID ${payId}`,
                      };
                  }
                  return { ...success, body: JSON.stringify(payIdJson) };
              } catch (error) {
                  console.log(error);
                  const response = {
                      statusCode: 404,
                      body: 'PayID resource not found',
                  };
                  return response;
              }
          };
      Description: "PayID Server"
      Environment:
        Variables:
          PAYID_BUCKET: !Ref "payIdBucketName"
      FunctionName: !Ref "lambdaFunctionName"
      Handler: "index.handler"
      MemorySize: 128
      Role: !GetAtt "lambdaIAMRole.Arn"
      Runtime: "nodejs12.x"
      Timeout: 10

  lambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "lambdaFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/GET/"

  lambdaApiGatewayPayIdResourceInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "lambdaFunction.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/GET/*"

  lambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaFunctionName}:*"
          PolicyName: "payid-server-logs"
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "s3:*"
                Effect: "Allow"
                Resource:
                  - "*"
          PolicyName: "payid-server-s3"


  lambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/lambda/${lambdaFunctionName}"
      RetentionInDays: 90

  hostedZone:
    Type: "AWS::Route53::HostedZone"
    Properties:
      Name: !Ref "domainName"

  dnsForHostedZone:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      HostedZoneId: !Ref "hostedZone"
      RecordSets:
        - Name: !Sub "${domainName}."
          Type: "A"
          AliasTarget:
            DNSName: !GetAtt "apiGatewayCustomDomain.DistributionDomainName"
            HostedZoneId: !GetAtt "apiGatewayCustomDomain.DistributionHostedZoneId"

  s3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: Private
      BucketName: !Ref "payIdBucketName"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

Outputs:
  apiGatewayBaseURL:
    Value: !Sub "https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/"

  apiGatewayReleaseStageName:
    Value: !Ref "apiGatewayStageName"

  apiGatewayInvokeURL:
    Value: !Sub "https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/${apiGatewayStageName}"

  lambdaArn:
    Value: !GetAtt "lambdaFunction.Arn"